
//main.js
// GET REQUEST
function getTodos() {
  axios
    .get('<API_URL>/todos')
    .then((res) => {
      showOutput(res);
    })
    .catch((err) => {
      console.error(err);
    });
}

// POST REQUEST
function addTodo() {
  axios
    .post('<API_URL>/todos', { title: 'New Todo', completed: false })
    .then((res) => {
      showOutput(res);
    })
    .catch((err) => {
      console.error(err);
    });
}

// PUT/PATCH REQUEST
function updateTodo() {
  axios
    .patch('<API_URL>/todos/1', { completed: true })
    .then((res) => {
      showOutput(res);
    })
    .catch((err) => {
      console.error(err);
    });
}

// DELETE REQUEST
function removeTodo() {
  axios
    .delete('<API_URL>/todos/1')
    .then((res) => {
      showOutput(res);
    })
    .catch((err) => {
      console.error(err);
    });
}

// SIMULTANEOUS DATA
function getData() {
  axios
    .all([
      axios.get('<API_URL>/todos'),
      axios.get('<API_URL>/posts'),
      axios.get('<API_URL>/users'),
    ])
    .then(axios.spread((todos, posts, users) => {
      console.log('Todos:', todos.data);
      console.log('Posts:', posts.data);
      console.log('Users:', users.data);
    }))
    .catch((err) => {
      console.error(err);
    });
}

// CUSTOM HEADERS
function customHeaders() {
  const config = {
    headers: {
      'Content-Type': 'application/json',
      Authorization: 'Bearer your_token',
    },
  };

  axios
    .post('<API_URL>/todos', { title: 'New Todo', completed: false }, config)
    .then((res) => {
      showOutput(res);
    })
    .catch((err) => {
      console.error(err);
    });
}

// TRANSFORMING REQUESTS & RESPONSES
function transformResponse() {
  const options = {
    transformRequest: [
      (data, headers) => {
        // Modify the request data
        return JSON.stringify(data);
      },
    ],
    transformResponse: [
      (data) => {
        // Modify the response data
        return JSON.parse(data);
      },
    ],
  };

  axios
    .post('<API_URL>/todos', { title: 'New Todo', completed: false }, options)
    .then((res) => {
      showOutput(res);
    })
    .catch((err) => {
      console.error(err);
    });
}

// ERROR HANDLING
function errorHandling() {
  axios
    .get('<API_URL>/nonexistent')
    .then((res) => {
      showOutput(res);
    })
    .catch((err) => {
      if (err.response) {
        // The request was made and the server responded with a status code outside the range of 2xx
        console.error('Error status:', err.response.status);
        console.error('Error data:', err.response.data);
      } else if (err.request) {
        // The request was made but no response was received
        console.error('No response received:', err.request);
      } else {
        // Something happened in setting up the request that triggered an Error
        console.error('Error:', err.message);
      }
    });
}

// CANCEL TOKEN
function cancelToken() {
  const source = axios.CancelToken.source();

  axios
    .get('<API_URL>/todos', {
      cancelToken: source.token,
    })
    .then((res) => {
      showOutput(res);
    })
    .catch((err) => {
      if (axios.isCancel(err)) {
        console.log('Request canceled:', err.message);
      } else {
        console.error(err);
      }
    });

  // Cancel the request
  source.cancel('Request canceled');
}

// INTERCEPTING REQUESTS & RESPONSES
axios.interceptors.request.use(
  (config) => {
    console.log('Request Interceptor');
    return config;
  },
  (error) => {
    console.error(error);
    return Promise.reject(error);
  }
);

axios.interceptors.response.use(
  (response) => {
    console.log('Response Interceptor');
    return response;
  },
  (error) => {
    console.error(error);
    return Promise.reject(error);
  }
);

// Show output in browser
function showOutput(res) {
  document.getElementById('res').innerHTML = `
    <div class="card card-body mb-4">
      <h5>Status: ${res.status}</h5>
    </div>

    <div class="card mt-3">
      <div class="card-header">
        Headers
      </div>
      <div class="card-body">
        <pre>${JSON.stringify(res.headers, null, 2)}</pre>
      </div>
    </div>

    <div class="card mt-3">
      <div class="card-header">
        Data
      </div>
      <div class="card-body">
        <pre>${JSON.stringify(res.data, null, 2)}</pre>
      </div>
    </div>

    <div class="card mt-3">
      <div class="card-header">
        Config
      </div>
      <div class="card-body">
        <pre>${JSON.stringify(res.config, null, 2)}</pre>
      </div>
    </div>
  `;
}

// Event listeners
document.getElementById('get').addEventListener('click', getTodos);
document.getElementById('post').addEventListener('click', addTodo);
document.getElementById('update').addEventListener('click', updateTodo);
document.getElementById('delete').addEventListener('click', removeTodo);
document.getElementById('sim').addEventListener('click', getData);
document.getElementById('headers').addEventListener('click', customHeaders);
document.getElementById('transform').addEventListener('click', transformResponse);
document.getElementById('error').addEventListener('click', errorHandling);
document.getElementById('cancel').addEventListener('click', cancelToken);
