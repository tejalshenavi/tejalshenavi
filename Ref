//UserForm.js
 
    import React, { useState, useRef } from 'react';

const UserForm = ({ addUser }) => {
  const usernameRef = useRef('');
  const ageRef = useRef('');
  const collegeRef = useRef('');
  const [errorMsg, setErrorMsg] = useState('');

  const handleAddUser = () => {
    const username = usernameRef.current.value.trim();
    const age = ageRef.current.value.trim();
    const college = collegeRef.current.value.trim();

    if (username === '' || age === '' || college === '') {
      setErrorMsg('Please enter a valid username, age, and college.');
      return;
    }

    if (isNaN(age) || +age < 0) {
      setErrorMsg('Invalid age input. Age must not be smaller than 0.');
      return;
    }

    addUser({ username, age, college });
    setErrorMsg('');

    // Clear input fields
    usernameRef.current.value = '';
    ageRef.current.value = '';
    collegeRef.current.value = '';
  };

  return (
    <div>
      <input
        type="text"
        ref={usernameRef}
        placeholder="Enter username"
      />
      <input
        type="number"
        ref={ageRef}
        placeholder="Enter age"
      />
      <input
        type="text"
        ref={collegeRef}
        placeholder="Enter college"
      />
      <button onClick={handleAddUser}>Add User</button>
      {errorMsg && <p>{errorMsg}</p>}
    </div>
  );
};

export default UserForm;

        
        
        
  


//UserList.js

import React from 'react';

const UserList = ({ users }) => {
  return (
    users.length > 0 && (
      <div>
        <h2>Users:</h2>
        <ul>
          {users.map((user, index) => (
            <li key={index}>
              Username: {user.username}, Age: {user.age}, College: {user.college}
            </li>
          ))}
        </ul>
      </div>
    )
  );
};

export default UserList;

//App.js
import React, { useState } from 'react';
import './App.css';
import UserForm from './UserForm';
import UserList from './UserList';

const App = () => {
  const [users, setUsers] = useState([]);

  const addUser = (userData) => {
    setUsers([...users, userData]);
  };

  return (
    <div className="app-container">
      <h1>User Management App</h1>
      <UserForm addUser={addUser} />
      <UserList users={users} />
    </div>
  );
};

export default App;

//App.css
.app-container {
  font-family: Arial, sans-serif;
  text-align: center;
  max-width: 400px;
  margin: 0 auto;
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

.app-container h1 {
  margin-bottom: 20px;
}

.app-container input {
  display: block;
  margin: 10px 0;
  padding: 5px;
}

.app-container button {
  padding: 5px 10px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  margin-top: 10px;
}

.app-container button:hover {
  background-color: #0056b3;
}

.app-container p {
  color: red;
}

ul {
  list-style: none;
  padding: 0;
}

li {
  margin-bottom: 5px;
}

